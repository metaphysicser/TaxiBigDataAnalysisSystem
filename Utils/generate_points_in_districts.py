# -*- coding: utf-8 -*-
"""
Created on Wed Aug 12 19:20:34 2020

@author: Giyn
"""

import random
import logging


logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s: %(message)s')  # log information settings

# sampling points in each administrative district
baiyun = [[113.273238, 23.157032]]
conghua = [[113.586460, 23.548350]]
haizhu = [[113.317200, 23.083310]]
huadu = [[113.220260, 23.403910]]
huangpu = [[113.480670, 23.181390]]
liwan = [[113.244280, 23.125860]]
nansha = [[113.524970, 22.801690]]
panyu = [[113.384240, 22.937720]]
tianhe = [[113.361990, 23.124630]]
yuexiu = [[113.266800, 23.129010]]
zengcheng = [[113.810900, 23.260930]]

districts = [baiyun, conghua, haizhu, huadu, huangpu, liwan, nansha, panyu, tianhe, yuexiu, zengcheng]
district_names = ['baiyun', 'conghua', 'haizhu', 'huadu', 'huangpu', 'liwan',
                   'nansha', 'panyu', 'tianhe', 'yuexiu', 'zengcheng']

count = 0
for district in districts:
    points = []
    for i in range(5000):
        points.append([round(random.uniform(district[0][0] - 0.003, district[0][0] + 0.003), 6),
                       round(random.uniform(district[0][1] - 0.003, district[0][1] + 0.003), 6)])
    save_path = '../data/points_in_districts/points_in_{}.txt'.format(district_names[count])
    with open(save_path, 'w') as file:
        file.write(str(points))
    count += 1
    logging.info('Successfully save data!')


################################################################################################################
#                               ___                         ___                                     ___        #
#                              /\__\                       /\  \         _____                     /\  \       #
#    ____         _____       /:/ _/_         ___          \:\  \       /::\  \       ___         /::\  \      #
#   / __ \       / ___ \     /:/ /\  \       /\__\          \:\  \     /:/\:\  \     /\__\       /:/\:\  \     #
#  / /  \ \     / /   \_)   /:/ /::\  \     /:/  /      ___  \:\  \   /:/  \:\__\   /:/__/      /:/  \:\  \    #
# ( (    ) )   ( (  ____   /:/_/:/\:\__\   /:/__/      /\  \  \:\__\ /:/__/ \:|__| /::\  \     /:/__/ \:\__\   #
# ( (  /\) )   ( ( (__  )  \:\/:/ /:/  /  /::\  \      \:\  \ /:/  / \:\  \ /:/  / \/\:\  \__  \:\  \ /:/  /   #
#  \ \_\ \/     \ \__/ /    \::/ /:/  /  /:/\:\  \      \:\  /:/  /   \:\  /:/  /   ~~\:\/\__\  \:\  /:/  /    #
#   \___\ \_     \____/      \/_/:/  /   \/__\:\  \      \:\/:/  /     \:\/:/  /       \::/  /   \:\/:/  /     #
#        \__)                  /:/  /         \:\__\      \::/  /       \::/  /        /:/  /     \::/  /      #
#                              \/__/           \/__/       \/__/         \/__/         \/__/       \/__/       #
#                                                                                                              #
################################################################################################################

##########################################################################
#      ___           ___           ___           ___           ___       #
#     /\  \         /\  \         /\  \         /\  \         /\  \      #
#     \:\  \       /::\  \       /::\  \       /::\  \       /::\  \     #
#      \:\  \     /:/\:\  \     /:/\:\  \     /:/\:\  \     /:/\ \  \    #
#      /::\  \   /::\~\:\__\   /:/  \:\__\   /::\~\:\  \   _\:\~\ \  \   #
#     /:/\:\__\ /:/\:\ \:|__| /:/__/ \:|__| /:/\:\ \:\__\ /\ \:\ \ \__\  #
#    /:/  \/__/ \:\~\:\/:/  / \:\  \ /:/  / \/__\:\/:/  / \:\ \:\ \/__/  #
#   /:/  /       \:\ \::/  /   \:\  /:/  /       \::/  /   \:\ \:\__\    #
#   \/__/         \:\/:/  /     \:\/:/  /        /:/  /     \:\/:/  /    #
#                  \::/__/       \::/__/        /:/  /       \::/  /     #
#                   ~~            ~~            \/__/         \/__/      #
#                                                                        #
##########################################################################
